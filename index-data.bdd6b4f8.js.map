{"mappings":"AAiBA,MAAMA,EAAO,CACTC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAiDlC,MAAMG,EAAQ,IA/ClB,MASQC,OACI,MAAMC,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,E,CAEhBI,QACI,GAAGH,KAAKI,SACJ,OAEJ,MAAMC,EAAYC,KAAKC,MACvBP,KAAKI,UAAW,EAEhBJ,KAAKQ,WAAaC,aAAY,KAC1B,MACMC,EADcJ,KAAKC,MACOF,EAC1BN,EAAOC,KAAKC,kBAAkBS,GAErCV,KAAKE,OAAOH,EAAK,GACjB,I,CAGPY,OACIC,cAAcZ,KAAKQ,YACnBR,KAAKI,UAAW,EAChB,MAAML,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,E,CAGhBE,kBAAkBF,GAKd,MAAO,C,MAJOC,KAAKa,IAAIC,KAAKC,MAAMhB,EAAS,MAAyB,O,KACvDC,KAAKa,IAAIC,KAAKC,MAAMhB,EAAS,KAAmB,M,KAChDC,KAAKa,IAAIC,KAAKC,MAAMhB,EAAS,IAAc,M,CAI5Dc,IAAIG,GACA,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CA3CrCC,aAAYjB,OAAEA,IACVF,KAAKQ,WAAa,KAClBR,KAAKI,UAAW,EAChBJ,KAAKE,OAASA,EAEdF,KAAKF,M,GAyCW,CACpBI,OAgBR,UAAyBkB,MAAEA,EAAKC,KAAEA,EAAIC,KAAEA,IACpC/B,EAAKK,UAAU2B,YAAc,GAAGH,KAASC,KAAQC,G,IAfrD/B,EAAKC,SAASgC,iBAAiB,QAAS3B,EAAMM,MAAMsB,KAAK5B,IAEzDN,EAAKI,QAAQ6B,iBAAiB,QAAS3B,EAAMc,KAAKc,KAAK5B","sources":["src/js/data-timer.js"],"sourcesContent":["import '../css/common.css';\n\n// const date1 = Date.now();\n// console.log('date1', date1);\n\n// setTimeout(() => {\n//     const date2 = Date.now();\n\n//     console.log('date1', date1);\n//     console.log('date2', date2);\n\n//     console.log(date2 - date1);\n// }, 3000);\n\n\n// ТАЙМЕР\n\nconst refs = {\n    startBtn: document.querySelector('button[data-action-start]'),\n    stopBtn: document.querySelector('button[data-action-stop]'),\n    clockface: document.querySelector('.js-clockfase'),\n};\nclass Timer {\n        constructor({ onTick }) {\n            this.intervalId = null;\n            this.isActive = false;\n            this.onTick = onTick;\n\n            this.init();\n        }\n\n        init() {\n            const time = this.getTimeComponents(0);\n            this.onTick(time);\n        }\n        start() {\n            if(this.isActive) {\n                return;\n            }\n            const startTime = Date.now();\n            this.isActive = true;\n\n            this.intervalId = setInterval(() => {\n                const currentTime = Date.now();\n                const deltaTime = currentTime - startTime;\n                const time = this.getTimeComponents(deltaTime);\n\n               this.onTick(time);                   \n            }, 1000 );\n        }\n\n        stop () {\n            clearInterval(this.intervalId);\n            this.isActive = false;\n            const time = this.getTimeComponents(0);\n            this.onTick(time);\n        }\n\n        getTimeComponents(time) {\n            const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n            const mins = this.pad(Math.floor((time % (1000 * 60 *60)) / (1000 * 60)));\n            const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n        \n            return { hours, mins, secs };\n        }\n        pad(value) {\n            return String(value).padStart(2, '0');\n        }\n    }\n    const timer = new Timer({\n        onTick: updateClockface,\n    }); \nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\n\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n \n    \n// refs.startBtn.addEventListener('click', () => {\n//     timer.start();\n// });\n// refs.stopBtn.addEventListener('click', () => {\n//     timer.stop();\n// });\n\n\n\nfunction updateClockface({ hours, mins, secs }) {\n    refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n}\n\n\n\n"],"names":["$495d134725ed4ad9$var$refs","startBtn","document","querySelector","stopBtn","clockface","$495d134725ed4ad9$var$timer","init","time","this","getTimeComponents","onTick","start","isActive","startTime","Date","now","intervalId","setInterval","deltaTime","stop","clearInterval","pad","Math","floor","value","String","padStart","constructor","hours","mins","secs","textContent","addEventListener","bind"],"version":3,"file":"index-data.bdd6b4f8.js.map"}