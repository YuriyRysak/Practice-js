{"mappings":"YAEA,IAAMA,EAAS,CACX,cACA,UACA,kBACA,aACA,cAGAC,EAAc,EACZC,EAAO,CACTC,SAAUC,SAASC,cAAc,kBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BAgCtC,SAASI,EAAmBC,GACxBR,EAAKI,YAAYK,YAAcD,C,CAEnC,SAASE,EAAoBF,GACzBR,EAAKK,cAAcI,YAAcD,C,CAWrC,SAASG,EAAIC,GACT,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IASeC,EAAKC,EATdC,GASSF,EATY,IASPC,EATa,KAU9BE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IARhDM,YAAW,WACPR,EAAQ,CAACF,QAAOM,Q,GACjBA,E,IAjDXlB,EAAKC,SAASsB,iBAAiB,SAE/B,WACIxB,GAAe,EACf,IAAMyB,EAAW1B,EAAO2B,IAAId,GAE5BJ,EAAkB,IAClBG,EAAoB,6CAIEgB,EAHNF,EAIfX,QAAQc,KAAKD,GAASE,MAAK,SAAAC,G,IAAEjB,EAAKiB,EAALjB,MAAOM,EAAIW,EAAJX,KACjCX,EAAkB,cAAgDuB,OAAzBlB,EAAM,qBAAqCkB,OAALZ,EAAK,aAqB5F,SAA4BW,G,IAACjB,EAADiB,EAACjB,MAAOM,EAARW,EAAQX,KAAMa,EAAdF,EAAcG,YAChCC,EAAK,WAAkCH,OAAvBC,EAAY,aAAwBD,OAAblB,EAAM,SAAYkB,OAALZ,EAAK,kBAC/DlB,EAAKM,UAAU4B,mBAAmB,YAAaD,E,CAtBbE,CAAZ,CAACvB,QAAOM,OAAMc,YAAAjC,G,IAKxC,SAAqB2B,GACjBb,QAAQuB,IAAIV,GAASE,MAAK,WACtBlB,EAAqB,wC,IAZzB2B,CAAWb,GAEf,IAA0BE,C","sources":["src/js/ipodrom.js"],"sourcesContent":["import '../css/common.css';\n\nconst horses = [\n    'Secretariat',\n    'Eclipse',\n    'West Australian',\n    'Flying Fox',\n    'Seabiscuit',\n];\n\nlet raceCounter = 0;\nconst refs = {\n    startBtn: document.querySelector('.js-start-race'),\n    winnerField: document.querySelector('.js-winner'),\n    progressField: document.querySelector('.js-progress'),\n    tableBody: document.querySelector('.js-results-table > tbody'),\n  \n};\n\nrefs.startBtn.addEventListener('click', onStart);\n\nfunction onStart() { \n    raceCounter += 1;\n    const promises = horses.map(run);\n\n    updateWinnerField('');\n    updateProgressField('üêé  –ó–∞–µ–∑–¥ –Ω–∞—á–∞—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—è—Å—è!');\n    determineWinner(promises);\n    waitForAll(promises);\n};\nfunction determineWinner (horsesP) {\n     Promise.race(horsesP).then(({horse, time}) => {\n        updateWinnerField(`üòã –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª –∑–∞ ${time} –≤—Ä–µ–º–µ–Ω–∏`);\n        updateResultTable({horse, time, raceCounter});\n            \n    });\n    \n}\nfunction waitForAll (horsesP) {\n    Promise.all(horsesP).then(() => {\n        updateProgressField(`ü¶î –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.`);\n        \n                        \n    });\n\n}\n\nfunction updateWinnerField (message) {\n    refs.winnerField.textContent = message;\n};\nfunction updateProgressField(message) {\n    refs.progressField.textContent = message;\n}\nfunction updateResultTable ({horse, time, raceCounter}) {\n    const tr = `<tr><td>${raceCounter}</td><td>${horse}</td>${time}<td></td></tr>`;\n    refs.tableBody.insertAdjacentHTML('beforeend', tr);\n\n}\n\n// const promises = horses.map(horse => run(horse));\n// console.log(promises);\n\nfunction run(horse) {\n    return new Promise((resolve, reject) => {\n        const time = getRandomTime(2000, 3500);\n        \n        setTimeout(() => {\n            resolve({horse, time})\n        }, time);\n\n    });\n}\n\nfunction getRandomTime(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}"],"names":["$4d3c7e4f4afe1c6d$var$horses","$4d3c7e4f4afe1c6d$var$raceCounter","$4d3c7e4f4afe1c6d$var$refs","startBtn","document","querySelector","winnerField","progressField","tableBody","$4d3c7e4f4afe1c6d$var$updateWinnerField","message","textContent","$4d3c7e4f4afe1c6d$var$updateProgressField","$4d3c7e4f4afe1c6d$var$run","horse","Promise","resolve","reject","min","max","time","Math","floor","random","setTimeout","addEventListener","promises","map","horsesP","race","then","param","concat","raceCounter1","raceCounter","tr","insertAdjacentHTML","$4d3c7e4f4afe1c6d$var$updateResultTable","all","$4d3c7e4f4afe1c6d$var$waitForAll"],"version":3,"file":"ipodrom.d152a4b7.js.map"}