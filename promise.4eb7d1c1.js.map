{"mappings":"YA8EA,IAAmBA,KAIT,UAHCC,QAAQC,QAAQ,oBAAuCC,OAALH,KAGjCI,MAErB,SAAqBC,GACxBC,QAAQC,IAAI,sBACZD,QAAQC,IAAIF,E","sources":["src/js/promise.js"],"sourcesContent":["//  PROMISE\n// const promise = new Promise((resolve, reject) => {\n//     const canFulfill = Math.random() > 0.5;\n//   setTimeout(() => {\n//     if (canFulfill) {\n//         resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n        \n//     }\n//     reject('Promis failed (rejected)!');\n// }, 1000);\n// });\n\n// promise.then(\n//     result => {\n//     console.log(`✅ ${result}`);\n// },\n// error => {\n//     console.log(`❌ ${error}`);\n// },);\n\n// promise.then(onFulfilled, onRejected);\n\n// function onFulfilled(result) {\n//     console.log(`✅ ${result}`);\n   \n// }\n// function onRejected(error) {\n//     console.log(`❌ ${error}`);\n// }\n\n\n\n// цепочки промисов\n// promise\n// .then(onFulfilled)\n// .then(x => {\n//         console.log(x);\n\n        \n\n//         return 10;\n//     })\n//     .then(y => {console.log(y);\n//     })\n// .catch(error => console.log(error))\n// .finally(() => console.log('Я буду виполнен в любом лучае'));\n\n                                     // ПРОМОСИФИКАЦИЯ:\n// const makeOrder = dish => {\n//     const DELAY = 1000;\n\n//     const promise = new Promise((resolve, reject) => {\n//         const passed = Math.random() > 0.5;\n//         setTimeout(() => {\n//             if (passed) {\n//                 resolve(`✅Вот ваше блюдо: ${dish}`);\n//             }\n//             reject('❌Извините закончились продукты(');\n//         }, DELAY);\n//     });\n//     return promise;\n//    };\n// makeOrder('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n// function onMakeOrderSuccess(result) {\n//     console.log('onMakeOrderSuccess');\n//     console.log(result);\n// } \n// function onMakeOrderError(error) {\n//     console.log('onMakeOrderError');\n//     console.log(error);\n// }\n\n/* ПРОМИСИФИКАЦИЯ \"синхронних\" функций\n    - Promise.resolve()\n    - Promise.reject()\n*/\n\n\nconst makeOrder = (dish) => {\n    return Promise.resolve(`✅Вот ваше блюдо: ${dish}`);        \n   \n   };\nmakeOrder('пирожок').then(onMakeOrderSuccess);\n\nfunction onMakeOrderSuccess(result) {\n    console.log('onMakeOrderSuccess');\n    console.log(result);\n} \nfunction onMakeOrderError(error) {\n    console.log('onMakeOrderError');\n    console.log(error);\n}\n\n/*Покемони с https://pokeapi.co/*/\n\n// const fetchPokemonById = id => {\n//     return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json());\n// };        \n\n// fetchPokemonById(1).then(onFetchSuccess).catch(onFetchError);\n\n// function onFetchSuccess(pokemon) {\n//     console.log('onFetchSuccess -> onFetchSuccess');\n//     console.log(pokemon);\n// }\n// function onFetchError(error) {\n//     console.log('onFetchError -> onFetchError');\n//     console.log('Это в блоке catch');\n//     console.log(error);\n// }\n\n\n// Пример: промисе\n\n\n// const makePromise = () => {\n//     return new Promise((resolve, reject) => {\n//         const passed = Math.random() > 0.5;\n//         setTimeout(() => {\n//             if(passed) {\n//                 resolve('✅Это -RESOLVE-'); \n//             }\n//             reject('❌Не работает reject');\n//         }, 2000);\n//      });\n        \n// };\n\n// makePromise()\n// .then(result => console.log(result))\n// .catch(error => console.log(error));"],"names":["dish","Promise","resolve","concat","then","result","console","log"],"version":3,"file":"promise.4eb7d1c1.js.map"}