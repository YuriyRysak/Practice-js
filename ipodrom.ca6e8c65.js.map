{"mappings":"AAEA,MAAMA,EAAS,CACX,cACA,UACA,kBACA,aACA,cAGJ,IAAIC,EAAc,EAClB,MAAMC,EAAO,CACTC,SAAUC,SAASC,cAAc,kBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BAgCtC,SAASI,EAAmBC,GACxBR,EAAKI,YAAYK,YAAcD,C,CAEnC,SAASE,EAAoBF,GACzBR,EAAKK,cAAcI,YAAcD,C,CAWrC,SAASG,EAAIC,GACT,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,GASSC,EATY,IASPC,EATa,KAU9BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADxD,IAAuBA,EAAKC,EAPpBI,YAAW,KACPR,EAAQ,C,MAACF,E,KAAOI,GAAM,GACvBA,EAAK,G,CAjDhBhB,EAAKC,SAASsB,iBAAiB,SAE/B,WACIxB,GAAe,EACf,MAAMyB,EAAW1B,EAAO2B,IAAId,GAE5BJ,EAAkB,IAClBG,EAAoB,6CAIEgB,EAHNF,EAIfX,QAAQc,KAAKD,GAASE,MAAK,EAAChB,MAACA,EAAKI,KAAEA,MACjCT,EAAkB,cAACK,qBAA4BI,aAqBvD,UAA4BJ,MAACA,EAAKI,KAAEA,EAAMa,YAAAC,IACtC,MAAMC,EAAK,WAAWD,aAAuBlB,SAAaI,kBAC1DhB,EAAKM,UAAU0B,mBAAmB,YAAaD,E,CAtBbE,CAAZ,C,MAACrB,E,KAAOI,E,YAAMjB,GAAa,IAKrD,SAAqB2B,GACjBb,QAAQqB,IAAIR,GAASE,MAAK,KACtBlB,EAAoB,wCAAC,G,CAZzByB,CAAWX,GAEf,IAA0BE,C","sources":["src/js/ipodrom.js"],"sourcesContent":["import '../css/common.css';\n\nconst horses = [\n    'Secretariat',\n    'Eclipse',\n    'West Australian',\n    'Flying Fox',\n    'Seabiscuit',\n];\n\nlet raceCounter = 0;\nconst refs = {\n    startBtn: document.querySelector('.js-start-race'),\n    winnerField: document.querySelector('.js-winner'),\n    progressField: document.querySelector('.js-progress'),\n    tableBody: document.querySelector('.js-results-table > tbody'),\n  \n};\n\nrefs.startBtn.addEventListener('click', onStart);\n\nfunction onStart() { \n    raceCounter += 1;\n    const promises = horses.map(run);\n\n    updateWinnerField('');\n    updateProgressField('üêé  –ó–∞–µ–∑–¥ –Ω–∞—á–∞—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—è—Å—è!');\n    determineWinner(promises);\n    waitForAll(promises);\n};\nfunction determineWinner (horsesP) {\n     Promise.race(horsesP).then(({horse, time}) => {\n        updateWinnerField(`üòã –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª –∑–∞ ${time} –≤—Ä–µ–º–µ–Ω–∏`);\n        updateResultTable({horse, time, raceCounter});\n            \n    });\n    \n}\nfunction waitForAll (horsesP) {\n    Promise.all(horsesP).then(() => {\n        updateProgressField(`ü¶î –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.`);\n        \n                        \n    });\n\n}\n\nfunction updateWinnerField (message) {\n    refs.winnerField.textContent = message;\n};\nfunction updateProgressField(message) {\n    refs.progressField.textContent = message;\n}\nfunction updateResultTable ({horse, time, raceCounter}) {\n    const tr = `<tr><td>${raceCounter}</td><td>${horse}</td>${time}<td></td></tr>`;\n    refs.tableBody.insertAdjacentHTML('beforeend', tr);\n\n}\n\n// const promises = horses.map(horse => run(horse));\n// console.log(promises);\n\nfunction run(horse) {\n    return new Promise((resolve, reject) => {\n        const time = getRandomTime(2000, 3500);\n        \n        setTimeout(() => {\n            resolve({horse, time})\n        }, time);\n\n    });\n}\n\nfunction getRandomTime(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}"],"names":["$4a75aaa4c4da6605$var$horses","$4a75aaa4c4da6605$var$raceCounter","$4a75aaa4c4da6605$var$refs","startBtn","document","querySelector","winnerField","progressField","tableBody","$4a75aaa4c4da6605$var$updateWinnerField","message","textContent","$4a75aaa4c4da6605$var$updateProgressField","$4a75aaa4c4da6605$var$run","horse","Promise","resolve","reject","time","min","max","Math","floor","random","setTimeout","addEventListener","promises","map","horsesP","race","then","raceCounter","raceCounter1","tr","insertAdjacentHTML","$4a75aaa4c4da6605$var$updateResultTable","all","$4a75aaa4c4da6605$var$waitForAll"],"version":3,"file":"ipodrom.ca6e8c65.js.map"}